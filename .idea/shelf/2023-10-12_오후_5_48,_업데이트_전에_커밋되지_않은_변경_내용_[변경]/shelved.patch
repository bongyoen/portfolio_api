Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'java'\r\n    id 'org.springframework.boot' version '3.1.4'\r\n    id 'io.spring.dependency-management' version '1.1.3'\r\n}\r\n\r\ngroup = 'com.co'\r\nversion = '0.0.1-SNAPSHOT'\r\n\r\njava {\r\n    sourceCompatibility = '17'\r\n}\r\n\r\nconfigurations {\r\n    compileOnly {\r\n        extendsFrom annotationProcessor\r\n    }\r\n}\r\n\r\nrepositories {\r\n    mavenCentral()\r\n}\r\n\r\ndependencies {\r\n    implementation('org.springframework.boot:spring-boot-starter')\r\n    implementation('com.amazonaws:aws-lambda-java-core:1.2.2')\r\n    implementation('com.amazonaws:aws-lambda-java-events:3.11.1')\r\n    compileOnly 'org.projectlombok:lombok'\r\n    annotationProcessor 'org.projectlombok:lombok'\r\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\r\n}\r\n\r\nbootJar {\r\n    classifier = 'aws'\r\n    mainClassName = 'com.ex'\r\n}\r\n\r\ntasks.named('test') {\r\n    useJUnitPlatform()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 0037fc586061cc09deedd75248a3323aa4a237be)
+++ b/build.gradle	(date 1697100422816)
@@ -1,11 +1,11 @@
 plugins {
     id 'java'
-    id 'org.springframework.boot' version '3.1.4'
+    id 'org.springframework.boot' version '2.7.7'
     id 'io.spring.dependency-management' version '1.1.3'
 }
 
 group = 'com.co'
-version = '0.0.1-SNAPSHOT'
+version = '0.0.2-SNAPSHOT'
 
 java {
     sourceCompatibility = '17'
@@ -23,18 +23,48 @@
 
 dependencies {
     implementation('org.springframework.boot:spring-boot-starter')
-    implementation('com.amazonaws:aws-lambda-java-core:1.2.2')
-    implementation('com.amazonaws:aws-lambda-java-events:3.11.1')
+
+
+    implementation 'org.springframework.cloud:spring-cloud-config-server'
+    implementation 'org.projectlombok:lombok:1.18.28'
+    testImplementation 'org.springframework.boot:spring-boot-starter-test'
+    // Spring Cloud Function 을 위한 의존성
+    implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws'
+    // AWS Lambda 에 배포하기 위한 의존성
+    implementation group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.2'
+    // AWS Lambda 이벤트를 다루기 위한 의존성
+    implementation group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '3.11.1'
+    implementation 'org.springframework.cloud:spring-cloud-starter-function-web'
+    implementation('com.amazonaws.serverless:aws-serverless-java-container-springboot2:1.9.3')
+
     compileOnly 'org.projectlombok:lombok'
     annotationProcessor 'org.projectlombok:lombok'
     testImplementation 'org.springframework.boot:spring-boot-starter-test'
 }
 
-bootJar {
-    classifier = 'aws'
-    mainClassName = 'com.ex'
+
+dependencyManagement {
+    imports {
+        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.7"
+    }
+}
+
+jar{
+    enabled=true
+    archiveClassifier = '' // Classifier 제거
 }
 
 tasks.named('test') {
     useJUnitPlatform()
 }
+
+// 빌드 후 코드를 zip 파일로 압축
+tasks.register('buildZip', Zip) {
+    from compileJava
+    from processResources
+    into('lib') {
+        from configurations.runtimeClasspath
+
+    }
+}
+
Index: src/main/java/com/co/portfolio_api/AdultJudgeResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/co/portfolio_api/AdultJudgeResponse.java b/src/main/java/com/co/portfolio_api/AdultJudgeResponse.java
new file mode 100644
--- /dev/null	(date 1696941257914)
+++ b/src/main/java/com/co/portfolio_api/AdultJudgeResponse.java	(date 1696941257914)
@@ -0,0 +1,13 @@
+package com.co.portfolio_api;
+
+import lombok.Getter;
+
+@Getter
+public class AdultJudgeResponse {
+    private final String result;
+
+    public AdultJudgeResponse(String result) {
+        this.result = result;
+    }
+
+}
\ No newline at end of file
Index: src/main/java/com/co/portfolio_api/TestLambdaHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/co/portfolio_api/TestLambdaHandler.java b/src/main/java/com/co/portfolio_api/TestLambdaHandler.java
new file mode 100644
--- /dev/null	(date 1696944366046)
+++ b/src/main/java/com/co/portfolio_api/TestLambdaHandler.java	(date 1696944366046)
@@ -0,0 +1,21 @@
+package com.co.portfolio_api;
+
+import com.amazonaws.serverless.exceptions.ContainerInitializationException;
+import com.amazonaws.serverless.proxy.model.AwsProxyRequest;
+import com.amazonaws.serverless.proxy.model.AwsProxyResponse;
+import com.amazonaws.serverless.proxy.spring.SpringBootLambdaContainerHandler;
+import com.amazonaws.services.lambda.runtime.Context;
+import com.amazonaws.services.lambda.runtime.RequestHandler;
+
+public class TestLambdaHandler implements RequestHandler<Object, Object> {
+
+    private SpringBootLambdaContainerHandler<AwsProxyRequest, AwsProxyResponse> handler;
+    public TestLambdaHandler() throws ContainerInitializationException {
+        handler = SpringBootLambdaContainerHandler.getAwsProxyHandler(Appendable.class);
+    }
+
+    @Override
+    public Object handleRequest(Object input, Context context) {
+        return handler.proxy((AwsProxyRequest) input, context);
+    }
+}
Index: src/main/java/com/co/portfolio_api/UserRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/co/portfolio_api/UserRequest.java b/src/main/java/com/co/portfolio_api/UserRequest.java
new file mode 100644
--- /dev/null	(date 1696941305622)
+++ b/src/main/java/com/co/portfolio_api/UserRequest.java	(date 1696941305622)
@@ -0,0 +1,11 @@
+package com.co.portfolio_api;
+
+import lombok.Getter;
+
+@Getter
+public class UserRequest {
+
+    private String name;
+    private int age;
+
+}
\ No newline at end of file
Index: src/main/java/com/co/portfolio_api/LambdaHandlers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/co/portfolio_api/LambdaHandlers.java b/src/main/java/com/co/portfolio_api/LambdaHandlers.java
new file mode 100644
--- /dev/null	(date 1696941287975)
+++ b/src/main/java/com/co/portfolio_api/LambdaHandlers.java	(date 1696941287975)
@@ -0,0 +1,7 @@
+package com.co.portfolio_api;
+
+import org.springframework.cloud.function.adapter.aws.SpringBootStreamHandler;
+
+public class LambdaHandlers extends SpringBootStreamHandler {
+
+}
\ No newline at end of file
Index: dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/dockerfile b/dockerfile
new file mode 100644
--- /dev/null	(date 1697098874549)
+++ b/dockerfile	(date 1697098874549)
@@ -0,0 +1,4 @@
+FROM openjdk:17-alpine
+ARG JAR_FILE=/build/libs/portfolio_api-0.0.2-SNAPSHOT.jar
+COPY ${JAR_FILE} /portfolio_api.jar
+ENTRYPOINT ["java","-jar","-Dspring.profiles.active=prod", "/portfolio_api.jar"]
\ No newline at end of file
Index: src/main/java/com/co/portfolio_api/PortfolioApiApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.co.portfolio_api;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class PortfolioApiApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(PortfolioApiApplication.class, args);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/co/portfolio_api/PortfolioApiApplication.java b/src/main/java/com/co/portfolio_api/PortfolioApiApplication.java
--- a/src/main/java/com/co/portfolio_api/PortfolioApiApplication.java	(revision 0037fc586061cc09deedd75248a3323aa4a237be)
+++ b/src/main/java/com/co/portfolio_api/PortfolioApiApplication.java	(date 1696941492672)
@@ -7,6 +7,8 @@
 public class PortfolioApiApplication {
 
     public static void main(String[] args) {
+        System.out.println("here??");
+
         SpringApplication.run(PortfolioApiApplication.class, args);
     }
 
Index: src/main/java/com/co/portfolio_api/AdultJudge.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/co/portfolio_api/AdultJudge.java b/src/main/java/com/co/portfolio_api/AdultJudge.java
new file mode 100644
--- /dev/null	(date 1696941475682)
+++ b/src/main/java/com/co/portfolio_api/AdultJudge.java	(date 1696941475682)
@@ -0,0 +1,21 @@
+package com.co.portfolio_api;
+
+import org.springframework.stereotype.Component;
+
+import java.util.function.Function;
+
+@Component
+public class AdultJudge implements Function<UserRequest, AdultJudgeResponse> {
+    @Override
+    public AdultJudgeResponse apply(UserRequest request) {
+
+        System.out.println("here?");
+        String name = request.getName();
+
+        if (request.getAge() > 20) {
+            return new AdultJudgeResponse(name + "은(는) 성인입니다.");
+        }
+
+        return new AdultJudgeResponse(name + "은(는) 성인이 아닙니다.");
+    }
+}
\ No newline at end of file
